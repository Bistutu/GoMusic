Index: handler/music.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package handler\n\nimport (\n\t\"net/http\"\n\t\"regexp\"\n\n\t\"GoMusic/initialize/log\"\n\n\t\"github.com/gin-gonic/gin\"\n\n\t\"GoMusic/common/models\"\n\t\"GoMusic/logic\"\n)\n\nconst (\n\tnetEasy = `(163cn)|(\\.163\\.)`\n\tqqMusic = `.qq.`\n\tSUCCESS = \"success\"\n)\n\nvar (\n\tnetEasyRegx, _ = regexp.Compile(netEasy)\n\tqqMusicRegx, _ = regexp.Compile(qqMusic)\n\trequestCount   = 1\n)\n\nfunc MusicHandler(c *gin.Context) {\n\n\tlink := c.PostForm(\"url\")\n\n\tlog.Infof(\"第 %v 次歌单请求：%v\", requestCount, link)\n\trequestCount++\n\n\tswitch {\n\t// 1、网易云\n\tcase netEasyRegx.MatchString(link):\n\t\tsongList, err := logic.NetEasyDiscover(link)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"fail to get neteasy discover: %v\", err)\n\t\t\tc.JSON(http.StatusBadRequest, &models.Result{Code: -1, Msg: err.Error(), Data: nil})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(200, &models.Result{\n\t\t\tCode: 1,\n\t\t\tMsg:  SUCCESS,\n\t\t\tData: songList,\n\t\t})\n\t\treturn\n\t// 2、QQ 音乐\n\tcase qqMusicRegx.MatchString(link):\n\t\tsongList, err := logic.QQMusicDiscover(link)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"fail to get qqmusic discover: %v\", err)\n\t\t\tc.JSON(http.StatusBadRequest, &models.Result{Code: -1, Msg: err.Error(), Data: nil})\n\t\t}\n\t\tc.JSON(200, &models.Result{\n\t\t\tCode: 1,\n\t\t\tMsg:  SUCCESS,\n\t\t\tData: songList,\n\t\t})\n\t\treturn\n\t// 3、都不是\n\tdefault:\n\t\tc.JSON(http.StatusBadRequest, nil)\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/handler/music.go b/handler/music.go
--- a/handler/music.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/handler/music.go	(date 1703641077938)
@@ -4,12 +4,11 @@
 	"net/http"
 	"regexp"
 
-	"GoMusic/initialize/log"
-
 	"github.com/gin-gonic/gin"
 
-	"GoMusic/common/models"
 	"GoMusic/logic"
+	"GoMusic/misc/log"
+	"GoMusic/misc/models"
 )
 
 const (
Index: repo/cache/redis.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cache\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/go-redis/redis/v8\"\n\n\t\"GoMusic/initialize/log\"\n)\n\nvar (\n\tctx = context.Background()\n\trdb *redis.Client\n)\n\nfunc init() {\n\trdb = redis.NewClient(&redis.Options{\n\t\tAddr:     \"127.0.0.1:6379\",   // redis 服务端地址\n\t\tPassword: \"SzW7fh2Fs5d2ypwT\", // redis 密码\n\t\tDB:       0,\n\t})\n}\n\nfunc SetKey(key string, value string) error {\n\treturn rdb.Set(ctx, key, value, 30*time.Second).Err() // 缓存 30 秒\n}\n\nfunc GetKey(key string) (string, error) {\n\tval, err := rdb.Get(ctx, key).Result()\n\tif err != redis.Nil && err != nil {\n\t\treturn \"\", err\n\t}\n\treturn val, nil\n}\n\nfunc MGet(keys ...string) ([]interface{}, error) {\n\tif len(keys) == 0 {\n\t\treturn nil, errors.New(\"keys is empty\")\n\t}\n\tresult, err := rdb.MGet(ctx, keys...).Result()\n\tif err != nil {\n\t\tlog.Errorf(\"MGet error: %v\", err)\n\t}\n\treturn result, err\n}\n\nfunc MSet(kv sync.Map) error {\n\tpipeline := rdb.Pipeline()\n\tkv.Range(func(k, v any) bool {\n\t\t// 缓存 72 小时\n\t\tpipeline.Set(ctx, k.(string), v, 72*time.Hour)\n\t\treturn true\n\t})\n\t// 不关注单个命令的执行结果，只关注 pipeline 执行的结果\n\tif _, err := pipeline.Exec(ctx); err != nil {\n\t\tlog.Error(\"MSet error: \", err)\n\t\treturn err\n\t}\n\treturn nil\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/repo/cache/redis.go b/repo/cache/redis.go
--- a/repo/cache/redis.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/repo/cache/redis.go	(date 1703641077957)
@@ -8,7 +8,7 @@
 
 	"github.com/go-redis/redis/v8"
 
-	"GoMusic/initialize/log"
+	"GoMusic/misc/log"
 )
 
 var (
@@ -18,7 +18,7 @@
 
 func init() {
 	rdb = redis.NewClient(&redis.Options{
-		Addr:     "127.0.0.1:6379",   // redis 服务端地址
+		Addr:     "127.0.0.1:16379",  // redis 服务端地址
 		Password: "SzW7fh2Fs5d2ypwT", // redis 密码
 		DB:       0,
 	})
Index: repo/db/mysql.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package db\n\nimport (\n\t//_ \"github.com/go-sql-driver/mysql\"\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/clause\"\n\n\t\"GoMusic/common/models\"\n\t\"GoMusic/initialize/log\"\n)\n\nvar db *gorm.DB\n\nfunc init() {\n\tdsn := \"root:12345678@tcp(127.0.0.1:3306)/go_music?charset=utf8mb4&parseTime=True&loc=Local\"\n\topen, err := gorm.Open(mysql.Open(dsn))\n\tif err != nil {\n\t\tlog.Errorf(\"数据库连接失败：%v\", err)\n\t\tpanic(err)\n\t}\n\tdb = open\n\t// 自动创建表\n\tdb.AutoMigrate(&models.NetEasySong{})\n\n\t// 调用自定义迁移函数修改表结构\n\tif err := MigrateNameField(db); err != nil {\n\t\tlog.Errorf(\"failed to migrate database: %v\", err)\n\t}\n}\n\nfunc MigrateNameField(db *gorm.DB) error {\n\t// 使用原生 SQL 来修改字段长度\n\treturn db.Exec(\"ALTER TABLE net_easy_songs MODIFY name VARCHAR(512);\").Error\n}\n\nfunc BatchGetSongById(ids []uint) (map[uint]string, error) {\n\tvar netEasySongs []*models.NetEasySong\n\terr := db.Where(\"id in ?\", ids).Find(&netEasySongs).Error\n\tif err != nil {\n\t\tlog.Errorf(\"查询数据库失败：%v\", err)\n\t\treturn nil, err\n\t}\n\t// 歌曲id:歌曲信息\n\tnetEasySongMap := make(map[uint]string)\n\tfor _, v := range netEasySongs {\n\t\tnetEasySongMap[v.Id] = v.Name\n\t}\n\treturn netEasySongMap, nil\n}\n\nfunc BatchInsertSong(netEasySongs []*models.NetEasySong) error {\n\t// 如果 Duplicate primary key 则执行 update 操作\n\terr := db.Clauses(clause.OnConflict{\n\t\tUpdateAll: true,\n\t}).CreateInBatches(netEasySongs, 500).Error\n\tif err != nil {\n\t\tlog.Errorf(\"数据库插入失败：%v\", err)\n\t}\n\treturn err\n}\n\nfunc BatchDelSong(ids []int) error {\n\terr := db.Delete(&models.NetEasySong{}, ids).Error\n\tif err != nil {\n\t\tlog.Errorf(\"数据库删除数据失败：%v\", err)\n\t}\n\treturn err\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/repo/db/mysql.go b/repo/db/mysql.go
--- a/repo/db/mysql.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/repo/db/mysql.go	(date 1703641077916)
@@ -6,14 +6,14 @@
 	"gorm.io/gorm"
 	"gorm.io/gorm/clause"
 
-	"GoMusic/common/models"
-	"GoMusic/initialize/log"
+	"GoMusic/misc/log"
+	"GoMusic/misc/models"
 )
 
 var db *gorm.DB
 
 func init() {
-	dsn := "root:12345678@tcp(127.0.0.1:3306)/go_music?charset=utf8mb4&parseTime=True&loc=Local"
+	dsn := "go_music:12345678@tcp(127.0.0.1:3306)/go_music?charset=utf8mb4&parseTime=True&loc=Local"
 	open, err := gorm.Open(mysql.Open(dsn))
 	if err != nil {
 		log.Errorf("数据库连接失败：%v", err)
Index: initialize/router.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/initialize/router.go b/handler/router.go
rename from initialize/router.go
rename to handler/router.go
--- a/initialize/router.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/handler/router.go	(date 1703641077918)
@@ -1,10 +1,8 @@
-package initialize
+package handler
 
 import (
 	"github.com/gin-contrib/cors"
 	"github.com/gin-gonic/gin"
-
-	"GoMusic/handler"
 )
 
 func NewRouter() *gin.Engine {
@@ -14,6 +12,6 @@
 	// 加载静态资源
 	router.StaticFile("/", "./static")
 	// 绑定路由
-	router.POST("/songlist", handler.MusicHandler)
+	router.POST("/songlist", MusicHandler)
 	return router
 }
Index: repo/db/mysql_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package db\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"GoMusic/common/models\"\n)\n\nfunc TestBatchDelAndSet(t *testing.T) {\n\tvar songs []*models.NetEasySong\n\tsongs = append(songs, &models.NetEasySong{\n\t\tId:   5241457,\n\t\tName: \"小酒窝(Live) - 蔡卓妍 / 林俊杰\",\n\t})\n\tsongs = append(songs, &models.NetEasySong{\n\t\tId:   1935948203,\n\t\tName: \"星河万里 - 王大毛\",\n\t})\n\n\t// Del\n\terr := BatchDelSong([]int{5241457, 1935948203})\n\tassert.NoError(t, err)\n\n\t// Set\n\terr = BatchInsertSong(songs)\n\tassert.NoError(t, err)\n}\n\nfunc TestBatchGet(t *testing.T) {\n\tsongs, err := BatchGetSongById([]uint{5241457, 1935948203})\n\tassert.NoError(t, err)\n\tassert.Equal(t, \"小酒窝(Live) - 蔡卓妍 / 林俊杰\", songs[5241457])\n\tassert.Equal(t, \"星河万里 - 王大毛\", songs[1935948203])\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/repo/db/mysql_test.go b/repo/db/mysql_test.go
--- a/repo/db/mysql_test.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/repo/db/mysql_test.go	(date 1703641077955)
@@ -5,7 +5,7 @@
 
 	"github.com/stretchr/testify/assert"
 
-	"GoMusic/common/models"
+	"GoMusic/misc/models"
 )
 
 func TestBatchDelAndSet(t *testing.T) {
Index: common/utils/qqmusic_sign_native.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/utils/qqmusic_sign_native.go b/misc/utils/qqmusic_sign_native.go
rename from common/utils/qqmusic_sign_native.go
rename to misc/utils/qqmusic_sign_native.go
--- a/common/utils/qqmusic_sign_native.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/misc/utils/qqmusic_sign_native.go	(date 1703641077953)
@@ -3,9 +3,9 @@
 import (
 	_ "embed"
 
-	"GoMusic/initialize/log"
-
 	"github.com/robertkrimen/otto"
+
+	"GoMusic/misc/log"
 )
 
 //go:embed qqmusic_encrypt.js
Index: logic/neteasy_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"GoMusic/common/utils\"\n)\n\nconst (\n\tV1 = \"http://163cn.tv/zoIxm3\"\n\tV5 = \"http://music.163.com/playlist/2275447155/434174568/?userid=440609461\"\n\n\tV2 = \"https://music.163.com/#/playlist?app_version=8.10.81&id=8725919816&dlt=0846&creatorId=341246998\"\n\tV3 = \"https://music.163.com/playlist?id=477577176&userid=341246998\"\n\tV4 = \"分享Mad_Cat_的歌单《Mad_Cat_喜欢的音乐》http://163cn.tv/aSl9Z1 (@网易云音乐)\"\n)\n\nfunc TestRegex(t *testing.T) {\n\tt.Run(\"Extracted URL\", func(t *testing.T) {\n\t\tsample := []string{V1, V2, V3, V4, V5}\n\t\turlPattern := `http[s]?://[^ ]+`\n\t\tre := regexp.MustCompile(urlPattern)\n\t\tfor _, v := range sample {\n\t\t\tfmt.Println(\"Extracted URL:\", re.FindString(v))\n\t\t}\n\t})\n\tt.Run(\"Extracted ID\", func(t *testing.T) {\n\t\tsample := []string{V1, V2, V3, V4, V5}\n\t\tre := regexp.MustCompile(`playlist/(\\d+)`)\n\t\t// 在字符串中查找第一个匹配项\n\t\tfor _, v := range sample {\n\t\t\tmatch := re.FindStringSubmatch(v)\n\t\t\t// 检查是否找到匹配项，并打印\n\t\t\tif len(match) > 1 {\n\t\t\t\tfmt.Println(match[1]) // 第二个元素包含第一个括号内的匹配内容\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"No match found\")\n\t\t\t}\n\t\t}\n\t})\n\n}\n\nfunc TestBracketRegex(t *testing.T) {\n\tfmt.Println(utils.StandardSongName(\"理想三旬（女声版） - 藤柒吖\"))\n\tfmt.Println(utils.StandardSongName(\"小酒窝(Live) - 蔡卓妍 / 林俊杰\"))\n\tfmt.Println(utils.StandardSongName(\"最后一页（完整版） - 洛尘鞅_\"))\n\tfmt.Println(utils.StandardSongName(\"知我（抒情版） - 尘ah.\"))\n\tfmt.Println(utils.StandardSongName(\"幻听（女声版） - 星月酱\"))\n}\n\nfunc TestDiscover(t *testing.T) {\n\tsample := []string{V1, V2, V3, V4, V5}\n\tfor _, v := range sample {\n\t\tdiscover, err := NetEasyDiscover(v)\n\t\tassert.NoError(t, err)\n\t\tt.Log(discover)\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/logic/neteasy_test.go b/logic/neteasy_test.go
--- a/logic/neteasy_test.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/logic/neteasy_test.go	(date 1703641077943)
@@ -7,7 +7,7 @@
 
 	"github.com/stretchr/testify/assert"
 
-	"GoMusic/common/utils"
+	"GoMusic/misc/utils"
 )
 
 const (
Index: logic/kugou.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic\n\nimport (\n\t\"net/url\"\n\t\"regexp\"\n\n\t\"GoMusic/common/models\"\n\t\"GoMusic/httputil\"\n\t\"GoMusic/initialize/log\"\n)\n\nconst (\n\tKuGouShort = `t1\\.kugou`\n\tKuGouPC    = `wwwapi\\.kugou`\n\tKuGouPhone = `m\\.kugou`\n)\n\nvar (\n\tKuGouShortRegx = regexp.MustCompile(KuGouShort)\n\tKuGouPCRegx    = regexp.MustCompile(KuGouPC)\n\tKuGouPhoneRegx = regexp.MustCompile(KuGouPhone)\n)\n\n// 短链：https://t1.kugou.com/aRgNRccBhV2\n// http://wwwapi.kugou.com/share/zlist.html\n// https://m.kugou.com/songlist/gcid_3zbivkavz4z072\n\nfunc KuGouDiscover(link string) (*models.SongList, error) {\n\n\treturn nil, nil\n}\n\nfunc getRealUrl(link string) (string, error) {\n\tvar err error\n\n\t// 如果是长链附加短链的形式\n\tif KuGouPCRegx.MatchString(link) {\n\t\tquery, err := url.ParseQuery(link)\n\t\tif err != nil {\n\t\t\tlog.Error(\"fail to parse query: %v\", err)\n\t\t\treturn \"\", err\n\t\t}\n\n\t\tchain := query.Get(\"chain\")\n\t\tif chain == \"\" {\n\t\t\tlog.Error(\"error param, chain is empty\")\n\t\t\treturn \"\", err\n\t\t}\n\t\tlink = \"https://t1.kugou.com/\" + chain\n\t}\n\n\t// 如果是短链\n\tif KuGouShortRegx.MatchString(link) {\n\t\tlink, err = httputil.GetRedirectLocation(link)\n\t\tif err != nil {\n\t\t\tlog.Error(\"fail to get redirect location: %v\", err)\n\t\t\treturn \"\", err\n\t\t}\n\t}\n\n\treturn link, nil\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/logic/kugou.go b/logic/kugou.go
--- a/logic/kugou.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/logic/kugou.go	(date 1703641077934)
@@ -4,9 +4,9 @@
 	"net/url"
 	"regexp"
 
-	"GoMusic/common/models"
-	"GoMusic/httputil"
-	"GoMusic/initialize/log"
+	"GoMusic/misc/httputil"
+	"GoMusic/misc/log"
+	"GoMusic/misc/models"
 )
 
 const (
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 迁移网易云/QQ音乐歌单至 Apple/Youtube/Spotify Music\n\n链接：https://music.unmeta.cn\n\n项目后端使用 Golang + Gin 开发，前端使用 Vue + ElementUI 编写。\n\n<img src=\"./images/0.png\" alt=\"image-20231008190554003\" style=\"width:60%; border: 1px solid black;\" />\n\n\n\n# 使用指南\n\n1. 输入歌单链接，如：http://163cn.tv/zoIxm3\n2. 复制查询结果\n3. 打开 **[TunemyMusic](https://www.tunemymusic.com/zh-CN/transfer)** 网站\n4. 选择歌单来源“任意文本”，将刚刚复制的歌单粘贴进去，选择 Apple/Youtube/Spotify Music 作为目的地，确认迁移\n\n<img src=\"./images/1.png\" alt=\"image-20231008190713343\" style=\"width:60%; border: 1px solid black;\"/>\n\n\n\n# 如何启动程序？\n\n- 安装 Golang\n- 将程序克隆至本地\n- 编译并运行\n\n```shell\ngit clone https://github.com/Bistutu/GoMusic.git\ncd GoMusic\ngo build &&./GoMusic\n```\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/README.md	(date 1703641077911)
@@ -4,7 +4,7 @@
 
 项目后端使用 Golang + Gin 开发，前端使用 Vue + ElementUI 编写。
 
-<img src="./images/0.png" alt="image-20231008190554003" style="width:60%; border: 1px solid black;" />
+<img src="common/images/0.png" alt="image-20231008190554003" style="width:60%; border: 1px solid black;" />
 
 
 
@@ -15,7 +15,7 @@
 3. 打开 **[TunemyMusic](https://www.tunemymusic.com/zh-CN/transfer)** 网站
 4. 选择歌单来源“任意文本”，将刚刚复制的歌单粘贴进去，选择 Apple/Youtube/Spotify Music 作为目的地，确认迁移
 
-<img src="./images/1.png" alt="image-20231008190713343" style="width:60%; border: 1px solid black;"/>
+<img src="common/images/1.png" alt="image-20231008190713343" style="width:60%; border: 1px solid black;"/>
 
 
 
Index: logic/soda.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic\n\nimport \"GoMusic/common/models\"\n\n// 汽水音乐\n\nfunc SodaDiscover(link string) (*models.SongList, error) {\n\treturn nil, nil\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/logic/soda.go b/logic/soda.go
--- a/logic/soda.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/logic/soda.go	(date 1703641077949)
@@ -1,6 +1,6 @@
 package logic
 
-import "GoMusic/common/models"
+import "GoMusic/misc/models"
 
 // 汽水音乐
 
Index: common/utils/music.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/utils/music.go b/misc/utils/music.go
rename from common/utils/music.go
rename to misc/utils/music.go
--- a/common/utils/music.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/misc/utils/music.go	(date 1703641077951)
@@ -5,9 +5,9 @@
 	"regexp"
 	"sync"
 
-	"GoMusic/common/models"
-	"GoMusic/httputil"
-	"GoMusic/initialize/log"
+	"GoMusic/misc/httputil"
+	"GoMusic/misc/log"
+	"GoMusic/misc/models"
 )
 
 const (
Index: logic/qqmusic.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"GoMusic/common/models\"\n\t\"GoMusic/common/utils\"\n\t\"GoMusic/httputil\"\n\t\"GoMusic/initialize/log\"\n)\n\nconst (\n\tqqMusicRedis   = \"qq_music:%d\"\n\tqqMusicPattern = \"https://u6.y.qq.com/cgi-bin/musics.fcg?sign=%s&_=%d\"\n\tqqMusicV1      = `fcgi-bin`\n\tqqMusicV2      = `details`\n\tqqMusicV3      = `playlist`\n\tqqMusicV4      = `id=[89]\\d{9}`\n)\n\nvar (\n\tqqMusicV1Regx = regexp.MustCompile(qqMusicV1)\n\tqqMusicV2Regx = regexp.MustCompile(qqMusicV2)\n\tqqMusicV3Regx = regexp.MustCompile(qqMusicV3)\n\tqqMusicV4Regx = regexp.MustCompile(qqMusicV4)\n)\n\n// QQMusicDiscover 获取qq音乐歌单\nfunc QQMusicDiscover(link string) (*models.SongList, error) {\n\ttid, platform, err := getParams(link)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 获取请求参数与验证签名\n\tparamString := models.GetQQMusicReqString(tid, platform)\n\tsign := utils.Encrypt(paramString)\n\n\t// 构建并发送请求\n\tlink = fmt.Sprintf(qqMusicPattern, sign, time.Now().UnixMilli())\n\tresp, err := httputil.Post(link, strings.NewReader(paramString))\n\tif err != nil {\n\t\tlog.Errorf(\"fail to get qqmusic: %v\", err)\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tbytes, _ := io.ReadAll(resp.Body)\n\n\tqqmusicResponse := &models.QQMusicResp{}\n\terr = json.Unmarshal(bytes, qqmusicResponse)\n\tif err != nil {\n\t\tlog.Errorf(\"fail to unmarshal qqmusic: %v\", err)\n\t\treturn nil, err\n\t}\n\tsongsString := make([]string, 0, len(qqmusicResponse.Req0.Data.Songlist))\n\tbuilder := strings.Builder{}\n\tfor _, v := range qqmusicResponse.Req0.Data.Songlist {\n\t\tbuilder.Reset()\n\t\t// 去除多余符号\n\t\tbuilder.WriteString(utils.StandardSongName(v.Name))\n\t\tbuilder.WriteString(\" - \")\n\n\t\tauthors := make([]string, 0, len(v.Singer))\n\t\tfor _, v := range v.Singer {\n\t\t\tauthors = append(authors, v.Name)\n\t\t}\n\t\tauthorsString := strings.Join(authors, \" / \")\n\t\tbuilder.WriteString(authorsString)\n\t\tsongsString = append(songsString, builder.String())\n\t}\n\treturn &models.SongList{\n\t\tName:       qqmusicResponse.Req0.Data.Dirinfo.Title,\n\t\tSongs:      songsString,\n\t\tSongsCount: qqmusicResponse.Req0.Data.Dirinfo.Songnum,\n\t}, nil\n}\n\n// GetNetEasyParam 获取歌单id\nfunc getParams(link string) (tid int, platform string, err error) {\n\tif qqMusicV4Regx.MatchString(link) {\n\t\tindex := strings.Index(link, \"id=\")\n\t\tif index < 0 || index+3 > len(link) {\n\t\t\tlog.Errorf(\"fail to get tid: %v\", err)\n\t\t\treturn\n\t\t}\n\t\ttid, err = strconv.Atoi(link[index+3 : index+13])\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"fail to convert tid: %v\", err)\n\t\t\treturn\n\t\t}\n\t\treturn tid, \"android\", nil\n\t}\n\tif qqMusicV1Regx.MatchString(link) {\n\t\tlink, err = httputil.GetRedirectLocation(link)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"fail to get redirection url: %v\", err)\n\t\t\treturn\n\t\t}\n\t}\n\tif qqMusicV2Regx.MatchString(link) {\n\t\tvar tidString string\n\t\ttidString, platform, err = utils.GetQQMusicParam(link)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"fail to get songs id: %v\", err)\n\t\t\treturn\n\t\t}\n\t\ttid, err = strconv.Atoi(tidString)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"fail to convert tid: %v\", err)\n\t\t\treturn\n\t\t}\n\t\treturn tid, platform, nil\n\t}\n\tif qqMusicV3Regx.MatchString(link) {\n\t\tindex := strings.Index(link, \"playlist\")\n\t\tif index < 0 || index+19 > len(link) {\n\t\t\tlog.Errorf(\"fail to get tid: %v\", err)\n\t\t\treturn\n\t\t}\n\t\ttid, err = strconv.Atoi(link[index+9 : index+19])\n\t\treturn tid, \"h5\", nil\n\t}\n\treturn 0, \"\", errors.New(\"invalid link\")\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/logic/qqmusic.go b/logic/qqmusic.go
--- a/logic/qqmusic.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/logic/qqmusic.go	(date 1703641077959)
@@ -10,10 +10,10 @@
 	"strings"
 	"time"
 
-	"GoMusic/common/models"
-	"GoMusic/common/utils"
-	"GoMusic/httputil"
-	"GoMusic/initialize/log"
+	"GoMusic/misc/httputil"
+	"GoMusic/misc/log"
+	"GoMusic/misc/models"
+	"GoMusic/misc/utils"
 )
 
 const (
Index: logic/neteasy.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"golang.org/x/sync/errgroup\"\n\n\t\"GoMusic/common/utils\"\n\t\"GoMusic/initialize/log\"\n\t\"GoMusic/repo/db\"\n\n\t\"GoMusic/common/models\"\n\t\"GoMusic/httputil\"\n\t\"GoMusic/repo/cache\"\n)\n\nconst (\n\tnetEasyRedis = \"net:%v\"\n\tnetEasyUrlV6 = \"https://music.163.com/api/v6/playlist/detail\"\n\tnetEasyUrlV3 = \"https://music.163.com/api/v3/song/detail\"\n\tchunkSize    = 500\n)\n\n// NetEasyDiscover 需转发 2~3 次请求\nfunc NetEasyDiscover(link string) (*models.SongList, error) {\n\t// 批量获取歌单信息：歌单名、歌曲ids、歌曲总数\n\tSongIdsResp, err := getSongsInfo(link)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tSongsListName := SongIdsResp.Playlist.Name     // 歌单名\n\ttrackIds := SongIdsResp.Playlist.TrackIds      // 歌曲列表\n\ttracksCount := SongIdsResp.Playlist.TrackCount // 歌曲总数\n\n\tsongCacheKey := make([]string, 0, len(trackIds))\n\tfor _, v := range trackIds {\n\t\tsongCacheKey = append(songCacheKey, fmt.Sprintf(netEasyRedis, v.Id))\n\t}\n\n\tresultMap := sync.Map{} // 结果\n\n\t// 1、尝试获取缓存，失败不退出\n\tcacheResult, _ := cache.MGet(songCacheKey...)\n\n\tmissCacheKey := make([]uint, 0)\n\tfor k, v := range cacheResult {\n\t\tif v != nil {\n\t\t\tresultMap.Store(trackIds[k].Id, v.(string))\n\t\t\tcontinue\n\t\t}\n\t\tmissCacheKey = append(missCacheKey, trackIds[k].Id)\n\t}\n\tif len(missCacheKey) == 0 { // 缓存全部命中，直接返回\n\t\tlog.Infof(\"全部命中缓存（网易云）: %v\", link)\n\t\treturn &models.SongList{\n\t\t\tName:       SongsListName,\n\t\t\tSongs:      utils.SyncMapToSortedSlice(trackIds, resultMap),\n\t\t\tSongsCount: tracksCount,\n\t\t}, nil\n\t}\n\n\t// 2、查询数据库，失败不退出\n\tdbResultMap, _ := db.BatchGetSongById(missCacheKey)\n\n\tmissDBKey := make([]uint, 0)\n\tfor _, v := range missCacheKey {\n\t\tif val, ok := dbResultMap[v]; ok {\n\t\t\tresultMap.Store(v, val)\n\t\t\tcontinue\n\t\t}\n\t\tmissDBKey = append(missDBKey, v)\n\t}\n\tif len(dbResultMap) == len(missCacheKey) { // 数据库全部命中\n\t\tmissKeyCacheMap := sync.Map{}\n\t\tfor k, v := range dbResultMap {\n\t\t\tmissKeyCacheMap.Store(fmt.Sprintf(netEasyRedis, k), v)\n\t\t}\n\t\t_ = cache.MSet(missKeyCacheMap)\n\n\t\treturn NewSongList(SongsListName, trackIds, resultMap, tracksCount), nil\n\t}\n\n\tmissKeyCacheMap, err := batchGetSongs(missDBKey, resultMap)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 写数据库\n\tmissDbData := make([]*models.NetEasySong, 0, len(missDBKey))\n\tfor _, v := range missDBKey {\n\t\tvalue, _ := missKeyCacheMap.Load(fmt.Sprintf(netEasyRedis, v))\n\t\tmissDbData = append(missDbData, &models.NetEasySong{Id: v, Name: value.(string)})\n\t}\n\t_ = db.BatchInsertSong(missDbData)\n\n\t// 写缓存\n\t_ = cache.MSet(missKeyCacheMap)\n\n\treturn &models.SongList{\n\t\tName:       SongsListName,\n\t\tSongs:      utils.SyncMapToSortedSlice(trackIds, resultMap),\n\t\tSongsCount: tracksCount,\n\t}, nil\n}\n\nfunc NewSongList(SongsListName string, trackIds []*models.TrackId, resultMap sync.Map, tracksCount int) *models.SongList {\n\treturn &models.SongList{\n\t\tName:       SongsListName,\n\t\tSongs:      utils.SyncMapToSortedSlice(trackIds, resultMap),\n\t\tSongsCount: tracksCount,\n\t}\n}\n\nfunc getSongsInfo(link string) (*models.NetEasySongId, error) {\n\tsongListId, err := utils.GetNetEasyParam(link)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp, err := httputil.Post(netEasyUrlV6, strings.NewReader(\"id=\"+songListId))\n\tif err != nil {\n\t\tlog.Errorf(\"fail to result: %v\", err)\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := io.ReadAll(resp.Body)\n\tSongIdsResp := &models.NetEasySongId{}\n\terr = json.Unmarshal(body, SongIdsResp)\n\tswitch {\n\tcase err != nil:\n\t\tlog.Errorf(\"fail to unmarshal: %v\", err)\n\t\treturn nil, err\n\tcase SongIdsResp.Code == 401:\n\t\tlog.Errorf(\"无权限访问, songList id: %v\", songListId)\n\t\treturn nil, errors.New(\"抱歉，您无权限访问该歌单\")\n\t}\n\treturn SongIdsResp, nil\n}\n\n// 批量从网易云音乐查询歌曲数据\nfunc batchGetSongs(missKey []uint, resultMap sync.Map) (sync.Map, error) {\n\tmissSongIds := make([]*models.SongId, 0, len(missKey))\n\tfor _, v := range missKey {\n\t\tmissSongIds = append(missSongIds, &models.SongId{Id: v})\n\t}\n\tmissSize := len(missSongIds)\n\t// errgroup 并发编程\n\terrgroup := errgroup.Group{}\n\tchunks := make([][]*models.SongId, 0, missSize/500+1)\n\tmissKeyCacheMap := sync.Map{}\n\n\tfor i := 0; i < missSize; i += chunkSize {\n\t\tend := i + chunkSize\n\t\tif end > missSize {\n\t\t\tend = missSize\n\t\t}\n\t\tchunks = append(chunks, missSongIds[i:end])\n\t}\n\tfor _, v := range chunks {\n\t\tchunk := v\n\t\terrgroup.Go(func() error {\n\t\t\tmarshal, _ := json.Marshal(chunk)\n\t\t\tresp, err := httputil.Post(netEasyUrlV3, strings.NewReader(\"c=\"+string(marshal)))\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"fail to result: %v\", err)\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdefer resp.Body.Close()\n\t\t\tbytes, _ := io.ReadAll(resp.Body)\n\t\t\tsongs := &models.Songs{}\n\t\t\terr = json.Unmarshal(bytes, &songs)\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"fail to unmarshal: %v\", err)\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tbuilder := strings.Builder{}\n\t\t\tfor _, v := range songs.Songs {\n\t\t\t\tbuilder.Reset()\n\t\t\t\t// 去除多余符号\n\t\t\t\tbuilder.WriteString(utils.StandardSongName(v.Name))\n\t\t\t\tbuilder.WriteString(\" - \")\n\n\t\t\t\tauthors := make([]string, 0, len(v.Ar))\n\t\t\t\tfor _, v := range v.Ar {\n\t\t\t\t\tauthors = append(authors, v.Name)\n\t\t\t\t}\n\t\t\t\tauthorsString := strings.Join(authors, \" / \")\n\t\t\t\tbuilder.WriteString(authorsString)\n\t\t\t\tsong := builder.String()\n\t\t\t\tmissKeyCacheMap.Store(fmt.Sprintf(netEasyRedis, v.Id), song)\n\t\t\t\tresultMap.Store(v.Id, song)\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\t}\n\t// 等待所有 goroutine 完成\n\tif err := errgroup.Wait(); err != nil {\n\t\tlog.Errorf(\"fail to wait: %v\", err)\n\t\treturn sync.Map{}, err\n\t}\n\treturn missKeyCacheMap, nil\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/logic/neteasy.go b/logic/neteasy.go
--- a/logic/neteasy.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/logic/neteasy.go	(date 1703641077930)
@@ -10,12 +10,12 @@
 
 	"golang.org/x/sync/errgroup"
 
-	"GoMusic/common/utils"
-	"GoMusic/initialize/log"
+	"GoMusic/misc/httputil"
+	"GoMusic/misc/log"
+	"GoMusic/misc/utils"
 	"GoMusic/repo/db"
 
-	"GoMusic/common/models"
-	"GoMusic/httputil"
+	"GoMusic/misc/models"
 	"GoMusic/repo/cache"
 )
 
Index: main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"fmt\"\n\n\t_ \"GoMusic/repo/db\"\n\n\t\"GoMusic/initialize\"\n\t\"GoMusic/initialize/log\"\n)\n\nfunc main() {\n\tr := initialize.NewRouter()\n\tif err := r.Run(fmt.Sprintf(\":%d\", 8081)); err != nil {\n\t\tlog.Errorf(\"fail to run server: %v\", err)\n\t\tpanic(err)\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.go b/main.go
--- a/main.go	(revision 442ea95a317aa8c3e86c364a20bea058000fd894)
+++ b/main.go	(date 1703641078728)
@@ -3,14 +3,13 @@
 import (
 	"fmt"
 
+	"GoMusic/handler"
+	"GoMusic/misc/log"
 	_ "GoMusic/repo/db"
-
-	"GoMusic/initialize"
-	"GoMusic/initialize/log"
 )
 
 func main() {
-	r := initialize.NewRouter()
+	r := handler.NewRouter()
 	if err := r.Run(fmt.Sprintf(":%d", 8081)); err != nil {
 		log.Errorf("fail to run server: %v", err)
 		panic(err)
diff --git a/initialize/log/log.go b/misc/log/log.go
rename from initialize/log/log.go
rename to misc/log/log.go
diff --git a/common/models/db.go b/misc/models/db.go
rename from common/models/db.go
rename to misc/models/db.go
diff --git a/common/models/neteasy.go b/misc/models/neteasy.go
rename from common/models/neteasy.go
rename to misc/models/neteasy.go
diff --git a/test/kugou_test.go b/misc/test/kugou_test.go
rename from test/kugou_test.go
rename to misc/test/kugou_test.go
diff --git a/common/models/result.go b/misc/models/result.go
rename from common/models/result.go
rename to misc/models/result.go
diff --git a/common/utils/qqmusic_sign.go b/misc/utils/qqmusic_sign.go
rename from common/utils/qqmusic_sign.go
rename to misc/utils/qqmusic_sign.go
diff --git a/httputil/http.go b/misc/httputil/http.go
rename from httputil/http.go
rename to misc/httputil/http.go
diff --git a/common/utils/qqmusic_sign_test.go b/misc/utils/qqmusic_sign_test.go
rename from common/utils/qqmusic_sign_test.go
rename to misc/utils/qqmusic_sign_test.go
diff --git a/common/models/qqmusic.go b/misc/models/qqmusic.go
rename from common/models/qqmusic.go
rename to misc/models/qqmusic.go
diff --git a/test/test_test.go b/misc/test/test_test.go
rename from test/test_test.go
rename to misc/test/test_test.go
diff --git a/common/utils/qqmusic_encrypt.js b/misc/utils/qqmusic_encrypt.js
rename from common/utils/qqmusic_encrypt.js
rename to misc/utils/qqmusic_encrypt.js
